{
  "hash": "9ee5c3d0e70cf29045e8d605fe8d1a30",
  "result": {
    "markdown": "---\ntitle: \"Spatial Regression\"\nexecute: \n  warning: false\n  message: false\n  fig-height: 7\n---\n\n\n\n\n## Introduction\n\nIn the previous session we looked at geographically weighted statistics, including geographically weighted correlation, which examines whether the correlation between two variables varies across a map. In this session we extend from correlation to looking at regression modelling with a spatial component (spatial regression). The data we shall use are a map of the rate of COVID-19 infections per thousand population in neighbourhoods of the North West of England over the period from the week commencing 2020-03-07 to the week commencing 2022-04-16. That rate is calculated as the total number of reported infections per neighbourhood, divided by the [mid-2020 ONS estimated population](https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates/datasets/middlesuperoutputareamidyearpopulationestimates){target=\"blank\"}. There are three problems with these data, which originate (prior to adjustment) from [https://coronavirus.data.gov.uk/details/download](https://coronavirus.data.gov.uk/details/download){target=\"_blank\"}:\n\n1. The rate, as calculated, does not allow for re-infection (i.e. the same person can catch COVID-19 more than once).\n2. Not everyone who had COVID was tested for a positive diagnosis. Limitations in the testing regime are described in [this paper](https://link.springer.com/article/10.1007/s12061-021-09400-8){target=\"_blank\"} and are most severe earlier in the pandemic and again towards the end of the data period when testing was scaled-back and then largely withdrawn.\n3. For data protection reasons, where a neighbourhood had less than three cases in a week, that number was reported as zero even though it could really be one or two. This undercount adds up, although, unsurprisingly it affects the largest cities most (because they have more neighbourhoods to be undercounted) in weeks when COVID is not especially prevalent (because in other weeks there are more often more than two cases per neighbourhoods). An adjustment has been made to the data to allow for this censoring of the data but not for the undercount caused by not testing positive.\n\nDespite their shortcomings, the data are sufficient to illustrate the methods, below.\n\n## Getting Started\n\nThe data are downloaded as follows. The required packages should be installed already, from previous sessions. As before, you may wish to begin by opening the R Project that you created for these classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!(\"remotes\" %in% installed.packages()[,1])) install.packages(\"remotes\", dependencies = TRUE)\nif(!(\"ggsflabel\" %in% installed.packages()[,1])) remotes::install_github(\"yutannihilation/ggsflabel\")\nrequire(sf)\nrequire(tidyverse)\nrequire(ggplot2)\nrequire(ggsflabel)\n\nif(!file.exists(\"covid.geojson\")) download.file(\"https://github.com/profrichharris/profrichharris.github.io/raw/main/MandM/data/covid.geojson\",\n\"covid.geojson\", mode = \"wb\", quiet = TRUE)\n\nread_sf(\"covid.geojson\") |>\n  filter(regionName == \"North West\") ->\n  covid\n```\n:::\n\n\nLooking at a map of the COVID-19 rates, it appears that there are patches of higher rates that tend to cluster in cities such as Preston, Manchester and Liverpool, although not exclusively so.\n\n![](hazard.gif){width=75}\n\n<font size = 3>Don't forget that you can, if you wish, use the `cols4all` and it's functions, e.g. `scale_fill_continuous_c4a_seq()` instead of `scale_fill_distiller()` in the code chunk below.</font>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid |>\n  filter(Rate > 400) |>\n  select(LtlaName) |>   # LtlaName is the name of the local authority\n  filter(!duplicated(LtlaName)) ->\n  high_rate\n\nggplot() +\n  geom_sf(data = covid, aes(fill = Rate), size = 0.25) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  geom_sf_label_repel(data = high_rate, aes(label = LtlaName), size = 3,\n                      alpha = 0.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n... and not without variation within the cities such as Manchester:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = covid |> filter(LtlaName == \"Manchester\")) +\n  geom_sf(aes(fill = Rate), size = 0.25) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAcross the map there appears to be a pattern of positive spatial autocorrelation in the COVID-19 rates of contiguous neighbours, whether this is measured using a Moran test,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(spdep)\nspweight <- nb2listw(poly2nb(covid, snap = 1))\nmoran.test(covid$Rate, spweight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  covid$Rate  \nweights: spweight    \n\nMoran I statistic standard deviate = 24.422, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4919206758     -0.0010834236      0.0004075223 \n```\n:::\n:::\n\n\nor using the Pearson correlation,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(lag.listw(spweight, covid$Rate), covid$Rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6726405\n```\n:::\n:::\n\n\nSome of the 'hot spots' of infection are suggested using the geographically-weighted means,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(GWmodel)\ncovid_sp <- as_Spatial(covid)\nbw <- bw.gwr(Rate ~ 1, data = covid_sp,\n             adaptive = TRUE, kernel = \"bisquare\", longlat = F)\ngwstats <- gwss(covid_sp, vars = \"Rate\", bw = bw, kernel = \"bisquare\",\n                adaptive = TRUE, longlat = F)\n```\n:::\n\n\nPlotting these,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$Rate_LM <- gwstats$SDF$Rate_LM\nggplot(covid, aes(fill = Rate_LM)) +\n  geom_sf(size = 0.25) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThey also are suggested using the G-statistic with a somewhat arbitrary bandwidth of 5km.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_centroid(covid, of_largest_polygon = TRUE)\nneighbours <- dnearneigh(coords, 0, 5000)\nspweightB <- nb2listw(neighbours, style = \"B\", zero.policy = TRUE)\ncovid$localG <- localG(covid$Rate, spweightB)\nbrks <- c(min(covid$localG, na.rm = TRUE),\n          -3.29, -2.58, -1.96, 1.96, 2.58, 3.29,\n          max(covid$localG, na.rm = TRUE))\ncovid$localG_gp <- cut(covid$localG, brks, include.lowest = TRUE)\npal <- c(\"purple\", \"dark blue\", \"light blue\", \"light grey\",\n                 \"yellow\", \"orange\", \"red\")\nggplot(covid, aes(fill = localG_gp)) +\n  geom_sf(size = 0.25) +\n  scale_fill_manual(\"G\", values = pal, na.value = \"white\",\n                    na.translate = F) +\n  theme_void() +\n  guides(fill = guide_legend(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## An initial model to explain the spatial patterns in the COVID-19 rates\n\nIt is likely that the spatial variation in the COVID-19 rates is due to differences in the physical attributes of the different neighbourhoods and/or of the populations who live in them. For example, the rates may be related to the relative level of deprivation in the neighbourhoods (the [Index of Multiple Deprivation](https://www.gov.uk/government/statistics/english-indices-of-deprivation-2019){target=\"_blank\"}, `IMD`), the age composition of their populations (e.g. percentage aged 0 to 11, `age0.11`), the population density (`density`), the number of carehome beds (`carebeds`, because particularly early on in the pandemic, carehome residents were at very high risk), and whether they contain an Accident and Emergency hospital (`AandE`, coded 1 if they do and 0 if they don't). Incorporating this into a standard regression model gives, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nols1 <- lm(Rate ~ IMD + age0.11 + age12.17 + age18.24 + age25.34 + age35.39 + \n             age50.59 + age60.69 + age70plus + density +\n             carebeds + AandE, data = covid)\nsummary(ols1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Rate ~ IMD + age0.11 + age12.17 + age18.24 + age25.34 + \n    age35.39 + age50.59 + age60.69 + age70plus + density + carebeds + \n    AandE, data = covid)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-134.816  -17.761    1.592   20.124  139.444 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 182.26850  113.79175   1.602 0.109553    \nIMD          -0.29381    0.10610  -2.769 0.005736 ** \nage0.11       2.21553    1.36681   1.621 0.105376    \nage12.17     -2.36944    1.94032  -1.221 0.222341    \nage18.24     -0.16683    1.16041  -0.144 0.885719    \nage25.34      2.31424    1.19221   1.941 0.052550 .  \nage35.39      6.65665    2.65716   2.505 0.012413 *  \nage50.59      6.31033    1.74161   3.623 0.000307 ***\nage60.69      0.34605    1.46550   0.236 0.813386    \nage70plus    -0.71097    1.23595  -0.575 0.565269    \ndensity     164.39302  636.21170   0.258 0.796162    \ncarebeds      0.03583    0.01489   2.407 0.016292 *  \nAandE         1.13369    4.03313   0.281 0.778703    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 31.75 on 911 degrees of freedom\nMultiple R-squared:  0.2039,\tAdjusted R-squared:  0.1934 \nF-statistic: 19.44 on 12 and 911 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\n</br>\nwhich, as its R-squared value of 0.204 suggests, goes some way to explaining the variation in the rates. Note that you can tidier output for some models using tidyvere's [broom](https://broom.tidymodels.org/){target=\"_blank\"} package and functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(broom)\ntidy(ols1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 5\n   term        estimate std.error statistic  p.value\n   <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept) 182.      114.         1.60  0.110   \n 2 IMD          -0.294     0.106     -2.77  0.00574 \n 3 age0.11       2.22      1.37       1.62  0.105   \n 4 age12.17     -2.37      1.94      -1.22  0.222   \n 5 age18.24     -0.167     1.16      -0.144 0.886   \n 6 age25.34      2.31      1.19       1.94  0.0525  \n 7 age35.39      6.66      2.66       2.51  0.0124  \n 8 age50.59      6.31      1.74       3.62  0.000307\n 9 age60.69      0.346     1.47       0.236 0.813   \n10 age70plus    -0.711     1.24      -0.575 0.565   \n11 density     164.      636.         0.258 0.796   \n12 carebeds      0.0358    0.0149     2.41  0.0163  \n13 AandE         1.13      4.03       0.281 0.779   \n```\n:::\n\n```{.r .cell-code}\nglance(ols1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.204         0.193  31.7      19.4 4.88e-38    12 -4500. 9027. 9095.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n:::\n:::\n\n\nLooking at R's standard diagnostic plots there is not any strong evidence that the standard ]residual Normality assumption](https://thestatsgeek.com/2013/08/07/assumptions-for-linear-regression/){target=\"_blank\"} of the regression statistics is being violated although, not very surprisingly, the variance inflation values (VIF) do suggest [high levels of colinearity](https://www.britannica.com/topic/collinearity-statistics){target=\"_blank\"} between the age variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,2))\nplot(ols1)\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nif(!(\"car\" %in% installed.packages()[,1])) install.packages(\"car\")\nrequire(car)\nvif(ols1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      IMD   age0.11  age12.17  age18.24  age25.34  age35.39  age50.59  age60.69 \n 2.834069 18.836543  6.050232 38.347245 27.513979 10.228388 16.430177 14.397087 \nage70plus   density  carebeds     AandE \n38.881759  2.123517  1.135127  1.030432 \n```\n:::\n:::\n\n\n![](hazard.gif){width=75}\n\n<font size = 3>There are no hard and fast rules but, in broad terms, a VIF value of 4 or 5 or above is worth considering as a potential issue and a value above 10 suggests a very high level of multicollinearity. The simple solution to the issue is to drop some of the colinear variables but not all: if X1 and X2 are highly correlated, you only need to consider dropping X1 or X2, not both.</font>\n\n</br>\nAlthough I am generally cautious about automated selection procedures, in this case a stepwise model selection appears useful to address the colinearity:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols2 <- step(ols1)\n```\n:::\n\n\nThe results are,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(ols2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept) 147.       14.4        10.3  1.96e-23\n2 IMD          -0.260     0.0941     -2.76 5.90e- 3\n3 age0.11       1.81      0.532       3.40 6.95e- 4\n4 age25.34      2.91      0.476       6.11 1.48e- 9\n5 age35.39      7.28      1.54        4.74 2.48e- 6\n6 age50.59      6.66      0.638      10.4  3.60e-24\n7 carebeds      0.0333    0.0142      2.35 1.91e- 2\n```\n:::\n\n```{.r .cell-code}\nglance(ols2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.201         0.196  31.7      38.5 8.36e-42     6 -4501. 9018. 9057.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n:::\n\n```{.r .cell-code}\nvif(ols2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     IMD  age0.11 age25.34 age35.39 age50.59 carebeds \n2.236588 2.865175 4.394042 3.425196 2.212515 1.031632 \n```\n:::\n:::\n\n\nAn analysis of variance (ANOVA) shows there is no statistically gain in using the model with more variables (`ols1`) so we can prefer the simpler (`ols2`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(ols2, ols1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nModel 1: Rate ~ IMD + age0.11 + age25.34 + age35.39 + age50.59 + carebeds\nModel 2: Rate ~ IMD + age0.11 + age12.17 + age18.24 + age25.34 + age35.39 + \n    age50.59 + age60.69 + age70plus + density + carebeds + AandE\n  Res.Df    RSS Df Sum of Sq      F Pr(>F)\n1    917 921337                           \n2    911 918176  6    3161.6 0.5228 0.7913\n```\n:::\n:::\n\n\nLooking again at the model (`tidy(ols2)`), it may seem surprising that the deprivation index is negatively correlated with the COVID rate -- implying more deprivation, fewer infections (geographies of health often work in the opposite direction; being poorer can come with a 'health premium') -- but this is due to the later variants of the disease that spread quickly through more affluent populations when restrictions on mobility and social interaction have been relaxed.\n\n## Spatial dependencies in the model residuals\n\nAlthough the model appears to fit the data reasonably well, there is a problem. The residuals -- the differences between what the model predicts as the COVID-19 rate at each location and what those rates actually are -- are supposed to be random noise, meaning their values should be independent of their location and of each other, with no spatial structure. They are not. In fact, if we apply a Moran's test to the residuals, using the test for regression residuals, `lm.morantest()`, we find that they are significantly spatially correlated:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.morantest(ols2, spweight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tGlobal Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = Rate ~ IMD + age0.11 + age25.34 + age35.39 +\nage50.59 + carebeds, data = covid)\nweights: spweight\n\nMoran I statistic standard deviate = 22.357, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    0.4461249282    -0.0033794098     0.0004042296 \n```\n:::\n:::\n\n\n</br>\nThe pattern is evident if we map the [standardised residuals](https://www.statology.org/standardized-residuals){target=\"_blank\"} from the function `rstandard()`. At the risk of geographic over-simplification, there is something of a north-south divide, with a patch of negative residuals to the north of the study region. These are rural neighbouhoods where the model is under-predicting the rate of COVID-19 cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$resids <- rstandard(ols2)\nbrks <- c(min(covid$resids), -3.29, -2.58, -1.96, 1.96, 2.58, 3.29,\n          max(covid$resids))\ncovid$resids_gp <- cut(covid$resids, brks, include.lowest = TRUE)\npal <- c(\"purple\", \"dark blue\", \"light blue\", \"light grey\", \"yellow\", \"orange\", \"red\")\nggplot(covid, aes(fill = resids_gp)) +\n  geom_sf(size = 0.25) +\n  scale_fill_manual(\"Standardised residual\", values = pal) +\n  theme_void() +\n  guides(fill = guide_legend(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Looking again at the model\n\nIt is possible that the spatial structure in the residuals exists because the model has been mis-specified. In particular, we might wonder if it was a mistake to drop the population density variable which perhaps had a polynomial (non-linear) relationship with the COVID rates. Let's find out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols3 <- update(ols2, . ~ . + poly(density, 2))\n```\n:::\n\n\n</br>\nCertainly, of the three models, this is the best fit to the data, as we can see from the various model fit diagnostics that are easily gathered together using the `glance()` function. Note the *highest*, adjusted r-squared value and *lowest* AIC value, for example. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(glance(ols1), glance(ols2), glance(ols3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.204         0.193  31.7      19.4 4.88e-38    12 -4500. 9027. 9095.\n2     0.201         0.196  31.7      38.5 8.36e-42     6 -4501. 9018. 9057.\n3     0.248         0.241  30.8      37.7 5.93e-52     8 -4473. 8966. 9015.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n:::\n:::\n\n\nAn analysis of variance also suggests that the model fit has improved significantly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(ols2, ols3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nModel 1: Rate ~ IMD + age0.11 + age25.34 + age35.39 + age50.59 + carebeds\nModel 2: Rate ~ IMD + age0.11 + age25.34 + age35.39 + age50.59 + carebeds + \n    poly(density, 2)\n  Res.Df    RSS Df Sum of Sq      F    Pr(>F)    \n1    917 921337                                  \n2    915 867305  2     54032 28.502 9.819e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nHowever, there is still spatial autocorrelation left in the model residuals, albeit slightly reduced from before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.morantest(ols2, spweight)$estimate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nObserved Moran I      Expectation         Variance \n    0.4461249282    -0.0033794098     0.0004042296 \n```\n:::\n\n```{.r .cell-code}\nlm.morantest(ols3, spweight)$estimate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nObserved Moran I      Expectation         Variance \n    0.4133475904    -0.0037610429     0.0004036032 \n```\n:::\n:::\n\n\nThe map of the residuals now looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$resids <- rstandard(ols3)\nbrks <- c(min(covid$resids), -3.29, -2.58, -1.96, 1.96, 2.58, 3.29,\n          max(covid$resids))\ncovid$resids_gp <- cut(covid$resids, brks, include.lowest = TRUE)\npal <- c(\"purple\", \"dark blue\", \"light blue\", \"light grey\", \"yellow\", \"orange\", \"red\")\nggplot(covid, aes(fill = resids_gp)) +\n  geom_sf(size = 0.25) +\n  scale_fill_manual(\"Standardised residual\", values = pal) +\n  theme_void() +\n  guides(fill = guide_legend(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Spatial regression models\n\n### Spatial error model\n\nOne way to handle the error structure is to fit a spatial simultaneous autoregressive error model which decomposes the error (the residuals) into two parts: a spatially lagged component (the bit that allows for geographical clustering in the residuals) and a remaining error: $y = X\\beta + \\lambda W \\xi + \\epsilon$. The model can be fitted using R's `spatialreg` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!(\"spatialreg\" %in% installed.packages()[,1])) install.packages(\"spatialreg\", dependencies = TRUE)\nrequire(spatialreg)\nerrmod <- errorsarlm(formula(ols3), data = covid, listw = spweight)\nsummary(errmod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:errorsarlm(formula = formula(ols3), data = covid, listw = spweight)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-88.9057 -13.5631   1.0775  15.1597 108.7168 \n\nType: error \nCoefficients: (asymptotic standard errors) \n                     Estimate  Std. Error z value  Pr(>|z|)\n(Intercept)        228.423031   13.194612 17.3118 < 2.2e-16\nIMD                 -0.595479    0.089535 -6.6508 2.915e-11\nage0.11              1.885127    0.449453  4.1943 2.738e-05\nage25.34             2.612570    0.416075  6.2791 3.406e-10\nage35.39             3.729976    1.369957  2.7227  0.006475\nage50.59             3.339294    0.608468  5.4880 4.064e-08\ncarebeds             0.051339    0.010181  5.0426 4.592e-07\npoly(density, 2)1 -111.989485   38.123934 -2.9375  0.003309\npoly(density, 2)2 -120.005334   28.931983 -4.1478 3.356e-05\n\nLambda: 0.69751, LR test value: 348.94, p-value: < 2.22e-16\nAsymptotic standard error: 0.028893\n    z-value: 24.142, p-value: < 2.22e-16\nWald statistic: 582.82, p-value: < 2.22e-16\n\nLog likelihood: -4298.755 for error model\nML residual variance (sigma squared): 572.93, (sigma: 23.936)\nNumber of observations: 924 \nNumber of parameters estimated: 11 \nAIC: 8619.5, (AIC for lm: 8966.5)\n```\n:::\n:::\n\n\nThe spatial component, $\\lambda$, the spatial autocorrelation in the residuals, is significant as a number of test statistics that are with it in the summary above show. What it confirms is what we could interpret from the earlier Moran's test of the regression residuals: having allowed for the variables that help to predict the COVID-rates there is still an unexplained geographic pattern whereby places for which the model over-predict the rate tend to be surrounded by other places where it does the same, and places where it under-predicts are surrounded by other under-predictions. The spatial error model gives a better fit to the data than the standard regression, as the following diagnostics tell us (the lower the AIC the better)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglance(ols3)$r.squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2479886\n```\n:::\n\n```{.r .cell-code}\nglance(errmod)$r.squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5543411\n```\n:::\n\n```{.r .cell-code}\nAIC(ols3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8966.455\n```\n:::\n\n```{.r .cell-code}\nAIC(errmod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8619.511\n```\n:::\n:::\n\n\nThe differences are such that there is little doubt that the error model offers a much improved fit but if we do wish to test that difference statistically then\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogLik(ols3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'log Lik.' -4473.228 (df=10)\n```\n:::\n\n```{.r .cell-code}\nlogLik(errmod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'log Lik.' -4298.755 (df=11)\n```\n:::\n\n```{.r .cell-code}\ndegf <- attr(logLik(errmod), \"df\") - attr(logLik(ols3), \"df\")\nLR <- -2 * (logLik(ols3) - logLik(errmod))\nLR > qchisq(0.99, degf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nUsing the error model changes the estimates of the regression coefficients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(ols3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n  term               estimate std.error statistic  p.value\n  <chr>                 <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)        185.       15.2       12.2   7.36e-32\n2 IMD                 -0.338     0.0941    -3.59  3.45e- 4\n3 age0.11              1.51      0.519      2.92  3.61e- 3\n4 age25.34             3.15      0.464      6.80  1.87e-11\n5 age35.39             3.96      1.56       2.55  1.11e- 2\n6 age50.59             5.67      0.696      8.15  1.15e-15\n7 carebeds             0.0290    0.0138     2.10  3.56e- 2\n8 poly(density, 2)1   23.8      43.1        0.553 5.81e- 1\n9 poly(density, 2)2 -267.       35.5       -7.54  1.11e-13\n```\n:::\n\n```{.r .cell-code}\ntidy(errmod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   term               estimate std.error statistic  p.value\n   <chr>                 <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)        228.       13.2        17.3  0       \n 2 IMD                 -0.595     0.0895     -6.65 2.91e-11\n 3 age0.11              1.89      0.449       4.19 2.74e- 5\n 4 age25.34             2.61      0.416       6.28 3.41e-10\n 5 age35.39             3.73      1.37        2.72 6.48e- 3\n 6 age50.59             3.34      0.608       5.49 4.06e- 8\n 7 carebeds             0.0513    0.0102      5.04 4.59e- 7\n 8 poly(density, 2)1 -112.       38.1        -2.94 3.31e- 3\n 9 poly(density, 2)2 -120.       28.9        -4.15 3.36e- 5\n10 lambda               0.698     0.0289     24.1  0       \n```\n:::\n:::\n\n\nFor example, where the estimate for `age50.59`, which is the estimate of the effect size, used to be 5.67, now it is  3.34. The 95% confidence intervals for those and the other coefficient estimates change too:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(ols3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          2.5 %        97.5 %\n(Intercept)        1.555316e+02  215.12202256\nIMD               -5.225593e-01   -0.15331307\nage0.11            4.956890e-01    2.53253071\nage25.34           2.244363e+00    4.06480619\nage35.39           9.064758e-01    7.01079426\nage50.59           4.308470e+00    7.03988250\ncarebeds           1.958051e-03    0.05604307\npoly(density, 2)1 -6.079177e+01  108.44040596\npoly(density, 2)2 -3.369641e+02 -197.81320842\n```\n:::\n\n```{.r .cell-code}\nconfint(errmod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          2.5 %       97.5 %\nlambda               0.64088619   0.75414281\n(Intercept)        202.56206649 254.28399509\nIMD                 -0.77096349  -0.41999361\nage0.11              1.00421453   2.76603896\nage25.34             1.79707796   3.42806128\nage35.39             1.04490945   6.41504355\nage50.59             2.14672005   4.53186895\ncarebeds             0.03138441   0.07129323\npoly(density, 2)1 -186.71102210 -37.26794826\npoly(density, 2)2 -176.71097755 -63.29968970\n```\n:::\n:::\n\n\n### Spatially lagged y model\n\nAlthough the spatial error model fits the data better than the standard regression model, it tells us only that there is an unexplained spatial structure to the residuals, not what caused it. It may offer better estimates of the model parameters and their statistical significance but it does not presuppose any particular spatial process generating the patterns in the values. A different model that explicitly tests for whether the value at a location is functionally dependent on the values of neighbouring location is the spatially lagged y model: $y = \\rho Wy + X\\beta + \\epsilon$. It models an ‘overspill’ or chain effect where the outcome (the Y value) at any location is affected by the outcomes at surrounding locations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlagmod <- lagsarlm(formula(ols3), data = covid, listw = spweight)\nsummary(lagmod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:lagsarlm(formula = formula(ols3), data = covid, listw = spweight)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-98.8140 -14.8770   1.0467  14.7420 110.1081 \n\nType: lag \nCoefficients: (asymptotic standard errors) \n                     Estimate  Std. Error z value  Pr(>|z|)\n(Intercept)         17.353050   14.403449  1.2048 0.2282866\nIMD                 -0.371501    0.074903 -4.9598 7.057e-07\nage0.11              1.377790    0.411239  3.3503 0.0008071\nage25.34             2.678105    0.367344  7.2905 3.089e-13\nage35.39             1.885234    1.235376  1.5260 0.1269996\nage50.59             3.636195    0.553621  6.5680 5.099e-11\ncarebeds             0.042747    0.010887  3.9264 8.623e-05\npoly(density, 2)1  -69.714325   34.062239 -2.0467 0.0406900\npoly(density, 2)2 -156.910145   28.073145 -5.5893 2.279e-08\n\nRho: 0.63167, LR test value: 342.73, p-value: < 2.22e-16\nAsymptotic standard error: 0.02966\n    z-value: 21.297, p-value: < 2.22e-16\nWald statistic: 453.57, p-value: < 2.22e-16\n\nLog likelihood: -4301.863 for lag model\nML residual variance (sigma squared): 591.59, (sigma: 24.323)\nNumber of observations: 924 \nNumber of parameters estimated: 11 \nAIC: 8625.7, (AIC for lm: 8966.5)\nLM test for residual autocorrelation\ntest value: 3.5747, p-value: 0.058666\n```\n:::\n:::\n\n\nIts test for residual autocorrelation does not generate a statistically significant result at a 95% level, meaning there is no statistically significant spatial structure now left in the residuals, although it is close. \n\nNote that the beta estimates of the lagged y-model cannot be interpreted in the same way as for a standard regression model. For example, the beta estimate of -0.372 for the `IMD` variable does not mean that if (hypothetically) we increased that variable by one unit at each location we should then expect the COVID-19 to everywhere decrease by 0.372 holding the other X variables constant. That is the correct interpretation for a standard (OLS) regression model and also for the spatial error model but not for where the lag of the Y variable is included as a predictor variable. The reason is because if we did raise the `IMD` value it would start something akin to a ‘chain reaction’ through the feedback of Y via the lagged Y values: the (hypothetical) increase in deprivation at the one location, decreases the COVID-19 rate at neighbouring locations, which decrease the rate at their neighbours and so forth. The total impact is a sum of the direct effect – that predicted to happen through the 1 unit change in `IMD` – and the indirect effect, which is that caused by ‘the chain reaction’ / feedback / ‘overspill’ in the system:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimpacts(lagmod, listw = spweight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImpact measures (lag, exact):\n                        Direct     Indirect       Total\nIMD                 -0.4123766   -0.5962428   -1.008619\nage0.11              1.5293852    2.2112917    3.740677\nage25.34             2.9727718    4.2982407    7.271013\nage35.39             2.0926626    3.0257175    5.118380\nage50.59             4.0362780    5.8359322    9.872210\ncarebeds             0.0474502    0.0686068    0.116057\npoly(density, 2)1  -77.3848558 -111.8884195 -189.273275\npoly(density, 2)2 -174.1746600 -251.8338663 -426.008526\n```\n:::\n:::\n\n\nAlthough it wasn't especially noticeable, there was a short pause as those impacts were calculated. The calculations could take much longer if the size of the spatial weights matrix was larger. As [this author](https://maczokni.github.io/crime_mapping_textbook/spatial-regression-models.html#fitting-and-interpreting-a-spatially-lagged-model){target=\"_blank\"} notes, after [Lesage and Pace, 2009](https://www.routledge.com/Introduction-to-Spatial-Econometrics/LeSage-Pace/p/book/9781420064247){target=\"_blank\"}, a faster approximation method can be used, here with `R = 1000` simulated distributions for the impact measures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nW <- as(spweight, \"CsparseMatrix\")\ntrMC <- trW(W, type = \"MC\")\nim <-summary(impacts(lagmod, tr = trMC, R = 1000), zstats = TRUE)\ndata.frame(im$res, row.names = names(lagmod$coefficients)[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         direct      indirect        total\nIMD                 -0.41253815   -0.59608012   -1.0086183\nage0.11              1.52998451    2.21068851    3.7406730\nage25.34             2.97393676    4.29706823    7.2710050\nage35.39             2.09348266    3.02489210    5.1183748\nage50.59             4.03785978    5.83434025    9.8722000\ncarebeds             0.04746879    0.06858809    0.1160569\npoly(density, 2)1  -77.41518121 -111.85789817 -189.2730794\npoly(density, 2)2 -174.24291529 -251.76517024 -426.0080855\n```\n:::\n\n```{.r .cell-code}\n                                          # The [-1] is to omit the intercept\n```\n:::\n\n\nAn advantage of this approach is that we can also obtain z and p-values for the impact measures; i.e. measures of statistical significance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(im$zmat, row.names = names(lagmod$coefficients)[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Direct  Indirect     Total\nIMD               -5.224707 -4.543510 -4.955190\nage0.11            3.352826  3.125896  3.264302\nage25.34           7.455163  5.550816  6.496947\nage35.39           1.569590  1.557996  1.569911\nage50.59           6.754634  5.527799  6.268183\ncarebeds           3.702060  3.358888  3.553594\npoly(density, 2)1 -1.957001 -1.897208 -1.933039\npoly(density, 2)2 -5.494869 -4.688478 -5.167561\n```\n:::\n\n```{.r .cell-code}\ndata.frame(im$pzmat, row.names = names(lagmod$coefficients)[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        Direct     Indirect        Total\nIMD               1.744313e-07 5.532518e-06 7.225959e-07\nage0.11           7.999084e-04 1.772644e-03 1.097343e-03\nage25.34          8.970602e-14 2.843400e-08 8.196599e-11\nage35.39          1.165106e-01 1.192342e-01 1.164358e-01\nage50.59          1.431966e-11 3.242729e-08 3.652847e-10\ncarebeds          2.138561e-04 7.825687e-04 3.800053e-04\npoly(density, 2)1 5.034731e-02 5.780055e-02 5.323143e-02\npoly(density, 2)2 3.910014e-08 2.752441e-06 2.371682e-07\n```\n:::\n:::\n\n\nMost but not all of the impacts are significant at, say, a 95% confidence (i.e p < 0.05). We can drop `age35.39` from the model with little loss of fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlagmod2 <- lagsarlm(Rate ~  IMD + age0.11 + age25.34 + age50.59 + carebeds + \n    poly(density, 2), data = covid, listw = spweight)\nanova(lagmod, lagmod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Model df    AIC  logLik Test L.Ratio p-value\nlagmod      1 11 8625.7 -4301.9    1                \nlagmod2     2 10 8626.1 -4303.0    2  2.3408 0.12602\n```\n:::\n\n```{.r .cell-code}\nbind_rows(glance(lagmod), glance(lagmod2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  r.squared   AIC   BIC deviance logLik  nobs\n      <dbl> <dbl> <dbl>    <dbl>  <dbl> <int>\n1     0.532 8626. 8679.  546629. -4302.   924\n2     0.532 8626. 8674.  547460. -4303.   924\n```\n:::\n:::\n\n\n</br>\nIn fact, an increase of 1 unit in, for example, the `IMD` variable, will play out slightly differently in different places because they have different neighbours with different Y values and are at different distances from each other. The code below, which is from the first edition of [Ward & Gleditsch (2008, pp.47)](https://uk.sagepub.com/en-gb/eur/spatial-regression-models/book262155){target=\"_blank\"}, will calculate the impact (of a one unit change in `IMD`) at each location but below I have limited it to the first ten so that it doesn't take too long to run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- nrow(covid)\nI <- matrix(0, nrow = n, ncol = n)\ndiag(I) <- 1\nrho <- lagmod$rho\nbeta <- lagmod$coefficients[\"age25.34\"]\nweights.matrix <- listw2mat(spweight)\nresults <- rep(NA, times=10)\nresults <- sapply(1:10, \\(i) {\n  xvector <- rep(0, times=n)\n  xvector[i] <- 1\n  impact <- solve(I - rho * weights.matrix) %*% xvector * beta\n  results[i] <- impact[i]\n})\nresults\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2.953840 2.973231 2.949515 2.908907 3.025483 2.901597 2.949316 2.960332\n [9] 2.949171 2.946591\n```\n:::\n:::\n\n\n### Choosing between the spatial error and lagged y model\n\nBefore fitting the spatial error and lagged y models, we could have looked for evidence in support of them using the function `lm.LMtests()`. This tests the basic OLS specification against the more general spatial error and lagged y models. Anselin and Rey (2014, p.110) offer the following decision tree that can, in the absence of a more theoretical basis for the model choice (e.g. the type of process being modelled), be used in conjunction with the test results to help select the model.\n\n![](flowchart.jpg)\n\n<font size = 2>Source: [Modern Spatial Econometrics in Practice](https://www.amazon.co.uk/Modern-Spatial-Econometrics-Practice-GeoDaSpace/dp/0986342106){target=\"_blank}</font>\n\nIn the first step, we find that in this instance both the LM-Error and LM-Lag tests are significant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols4 <- lm(Rate ~  IMD + age0.11 + age25.34 + age50.59 + carebeds + poly(density, 2), data = covid)\nlm.LMtests(ols4, spweight, test=c(\"LMerr\", \"LMlag\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tLagrange multiplier diagnostics for spatial dependence\n\ndata:  \nmodel: lm(formula = Rate ~ IMD + age0.11 + age25.34 + age50.59 +\ncarebeds + poly(density, 2), data = covid)\nweights: spweight\n\nLMerr = 411.48, df = 1, p-value < 2.2e-16\n\n\n\tLagrange multiplier diagnostics for spatial dependence\n\ndata:  \nmodel: lm(formula = Rate ~ IMD + age0.11 + age25.34 + age50.59 +\ncarebeds + poly(density, 2), data = covid)\nweights: spweight\n\nLMlag = 463.85, df = 1, p-value < 2.2e-16\n```\n:::\n:::\n\n\nMoving on to the robust tests, only the LM-Lag test is significant. Given the nature of COVID-19 as an infectious disease, it does seem reasonable to suppose that high rates of infection in any an area will 'overspill' into neighbouring areas too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.LMtests(ols4, spweight, test=c(\"RLMerr\", \"RLMlag\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tLagrange multiplier diagnostics for spatial dependence\n\ndata:  \nmodel: lm(formula = Rate ~ IMD + age0.11 + age25.34 + age50.59 +\ncarebeds + poly(density, 2), data = covid)\nweights: spweight\n\nRLMerr = 2.3319, df = 1, p-value = 0.1267\n\n\n\tLagrange multiplier diagnostics for spatial dependence\n\ndata:  \nmodel: lm(formula = Rate ~ IMD + age0.11 + age25.34 + age50.59 +\ncarebeds + poly(density, 2), data = covid)\nweights: spweight\n\nRLMlag = 54.693, df = 1, p-value = 1.409e-13\n```\n:::\n:::\n\n\n## A geographically weighted spatial weights matrix\n\nAs with the tests of spatial autocorrelation in an earlier session and as with the geographically weighted statistics, the results of the spatial regression models are dependent on the specification of the spatial weights matrix which can suffer from being somewhat arbitrary. We could, if we wish, try calibrating it around the geographically weighted mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(GWmodel)\nbw <- bw.gwr(Rate ~ 1, data = covid_sp, adaptive = TRUE, kernel = \"bisquare\")\n```\n:::\n\n\nTo now create the corresponding inverse distance spatial weights matrix for the models, we can use the `nn2` function in the `RANN` package to find the $bw = $ 18 nearest neighbours to each centroid point:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!(\"RANN\" %in% installed.packages()[,1]))  install.packages(\"RANN\")\nrequire(RANN)\ncoords <- st_coordinates(st_centroid(st_geometry(covid)))\nknn <- nn2(coords, coords, k = bw)\n```\n:::\n\n\nHaving done so, those neighbours can be geographically weighted using a bisquare kernel, as in the GWR calibration above. (A Gaussian kernel is obtained if `(1 - (x / max(x))^2)^2` is replaced by `exp(-0.5 * (x / max(x))^2)` in the code below).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- knn$nn.dists\nglist <- apply(d, 1, \\(x) {\n  (1 - (x / max(x))^2)^2\n}, simplify = FALSE)\nknearnb <- knn2nb(knearneigh(st_centroid(st_geometry(covid)), k = bw))\nspweightK <- nb2listw(knearnb, glist, style = \"C\")\n```\n:::\n\n\nThe results are not very successful though. The lag model with contiguous spatial weights fits the data better,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlagmod3 <- lagsarlm(formula(ols4), data = covid, listw = spweightK)\nbind_rows(glance(lagmod2), glance(lagmod3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  r.squared   AIC   BIC deviance logLik  nobs\n      <dbl> <dbl> <dbl>    <dbl>  <dbl> <int>\n1     0.532 8626. 8674.  547460. -4303.   924\n2     0.254 8959. 9008.  860562. -4470.   924\n```\n:::\n:::\n\n\nIn addition, the inverse distance weights are not row-standardised, which may cause some knock-on problems. They could become row-standardised (`spweightK <- nb2listw(knearnb, glist, style = \"W\")`) but if they are, by re-scaling each row of the weights to equal one, then the inverse distance weighting is altered.\n\n## Geographically Weighted Regression\n\nThe following charts shows the simple, bivariate regression relationship between `Rate` and `age0.11`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(covid, aes(x = age0.11, y = Rate)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nIntriguingly, it doesn't seem to be linear relationship but a polynomial one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(covid, aes(x = age0.11, y = Rate)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, formula = y ~ poly(x, 2))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nIt could be that the relationship is indeed curved but it might also be that the nature of the relationship is spatially dependent -- that the relationship between `Rate` and `age0.11` depends upon where it is measured. A `coplot()` from R's base graphics lends weight to the second idea: note how the regression relationship changes with `X` and `Y`, which are the centroids of the neighbourhoods in the North West of England.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoplot_df <- data.frame(st_coordinates(st_centroid(covid)), Rate = covid$Rate, age0.11 = covid$age0.11)\nPointsWithLine = function(x, y, ...) {\n    points(x=x, y=y, pch=20, col=\"black\")\n    abline(lm(y ~ x))\n}\ncoplot(Rate ~ age0.11 | X * Y, data = coplot_df, panel = PointsWithLine, overlap = 0)\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nImagine, now, that instead of dividing the geography of the North West's neighbourhoods into a $6 \\times 6$ grid, as in the coplot, we instead go from location to location within the study region, calculating a [geographically weighted regression](https://www.sciencedirect.com/science/article/pii/B9780080449104004478?via%3Dihub){target=\"_blank\"} at and around each one of them. This builds on the idea of geographically weighted statistics that allow the measured value of the statistic to vary locally from location to location across the study region; with geographically weighted it is the locally estimated regression coefficients that are allowed to vary. These are used to look for spatial variation in the regression relationships.\n\nIf the bandwidth is not known or there is no theoretical justification for it, it can be found using an automated selection procedure, here with a more complex model than the bivariate relationship shown in the coplot, instead using all the variables included in the choice between the spatial error and lagged y model, above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(GWmodel)\nbw <- bw.gwr(formula(ols4), data = covid_sp, adaptive = TRUE)\n```\n:::\n\n\nThe model can then be fitted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwrmod <- gwr.basic(formula(ols4), data = covid_sp, adaptive = TRUE, bw = bw)\ngwrmod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-07 15:15:36 \n   Call:\n   gwr.basic(formula = formula(ols4), data = covid_sp, bw = bw, \n    adaptive = TRUE)\n\n   Dependent (y) variable:  Rate\n   Independent variables:  IMD age0.11 age25.34 age50.59 carebeds density\n   Number of data points: 924\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-123.194  -18.380    1.473   20.623  127.554 \n\n   Coefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)        188.50375   15.17560  12.422  < 2e-16 ***\n   IMD                 -0.39649    0.09149  -4.334 1.63e-05 ***\n   age0.11              2.30191    0.41777   5.510 4.66e-08 ***\n   age25.34             3.93517    0.34898  11.276  < 2e-16 ***\n   age50.59             5.80810    0.69596   8.345 2.59e-16 ***\n   carebeds             0.02904    0.01382   2.101   0.0359 *  \n   poly(density, 2)1   29.14870   43.19300   0.675   0.4999    \n   poly(density, 2)2 -292.74904   34.12420  -8.579  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 30.88 on 916 degrees of freedom\n   Multiple R-squared: 0.2427\n   Adjusted R-squared: 0.2369 \n   F-statistic: 41.93 on 7 and 916 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 873446.4\n   Sigma(hat): 30.77887\n   AIC:  8970.975\n   AICc:  8971.172\n   BIC:  8151.892\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: bisquare \n   Adaptive bandwidth: 80 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                            Min.     1st Qu.      Median     3rd Qu.     Max.\n   Intercept         -3.9934e+01  1.3693e+02  2.1422e+02  2.6180e+02 419.5064\n   IMD               -2.7499e+00 -7.8059e-01 -4.4223e-01 -1.6702e-01   0.6501\n   age0.11           -4.0541e+00  2.3759e-01  3.4220e+00  6.1701e+00  12.5921\n   age25.34          -3.9387e+00  1.6469e+00  2.6274e+00  4.2843e+00  13.8157\n   age50.59          -9.5346e+00  2.1727e+00  5.3255e+00  8.6233e+00  14.3515\n   carebeds          -5.6126e-02  2.5983e-02  5.8662e-02  8.7463e-02   0.2220\n   poly(density, 2)1 -2.7204e+03 -4.1814e+02 -1.5602e+02  4.1180e-01 667.9061\n   poly(density, 2)2 -2.1980e+03 -5.4619e+02 -2.5300e+02 -1.2247e+02 643.0451\n   ************************Diagnostic information*************************\n   Number of data points: 924 \n   Effective number of parameters (2trace(S) - trace(S'S)): 270.2441 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 653.7559 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 8552.959 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 8216.682 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 8513.32 \n   Residual sum of squares: 313860.8 \n   R-square value:  0.7278617 \n   Adjusted R-square value:  0.6151951 \n\n   ***********************************************************************\n   Program stops at: 2023-03-07 15:15:36 \n```\n:::\n:::\n\n\nThe output requires some interpretation! The results of the global regression are those obtained from a standard OLS regression (i.e. `summary(lm(formula(ols4), data = covid_sp))`). It is 'global' because it is a model for the entire study region, without spatial variation in the regression estimates. The results of the geographically weighted regression are the results from, in this case, 924 separate but spatially overlapping regression models fitted, with geographic weighting, to spatial subsets of the data. All the local estimates are contained in the spatial data frame, `gwrmod$SDF`, including those for `age0.11` which are in `gwrmod$SDF$age0.11` and have the following distribution,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gwrmod$SDF$age0.11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-4.0541  0.2376  3.4220  3.3645  6.1701 12.5921 \n```\n:::\n:::\n\n\nThis is the same summary of the distribution that is included in the GWR coefficient estimates. What it means is that in at least one location the relationship of `age0.11` to `Rate` is, conditional on the other variables, negative. It is more usual for it to be positive -- more children, more infections (perhaps a school effect?) -- but the estimated effect size varies quite substantially across the locations in the study region. Its interquartile range is from 0.238 to 6.17. Mapping these local estimates reveals an interesting geography -- it is largely in and around Manchester where a greater number of children of primary school age or younger appears to *lower* instead of raising the infection rate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$age0.11GWR <- gwrmod$SDF$age0.11\nggplot(data = covid, aes(fill = age0.11GWR)) +\n  geom_sf(size = 0.25) +\n  scale_fill_gradient2(\"beta\", mid = \"grey90\", trans = \"reverse\") +\n  theme_void() +\n  guides(fill = guide_colourbar(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\nWith a bit of effort we can get all the variables on the same chart...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!(\"gridExtra\" %in% installed.packages()[,1])) install.packages(\"gridExtra\",\n                                                          dependencies = TRUE)\nrequire(gridExtra)\ng <- lapply(2:8, \\(j) {\n  st_as_sf(gwrmod$SDF[, j]) %>%\n    rename(beta = 1) %>%\n    ggplot(aes(fill = beta)) +\n      geom_sf(col = NA) +\n      scale_fill_gradient2(\"beta\", mid = \"grey90\", trans = \"reverse\") +\n      theme_void() +\n      guides(fill = guide_colourbar(reverse = TRUE)) +\n      ggtitle(names(gwrmod$SDF[j]))\n})\ngrid.arrange(grobs = g)\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n... however, not all of these regression estimates are necessarily statistically significant. If we use the estimated t-values to isolate those that are not (t-values less than -1.96 or greater than +1.96 can be considered significant at a 95% confidence), then, for the `age0.11` variable we obtain,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$age0.11GWR[abs(gwrmod$SDF$age0.11_TV) < 1.96] <- NA\nggplot(data = covid, aes(fill = age0.11GWR)) +\n  geom_sf(size = 0.25) +\n  scale_fill_gradient2(\"beta\", mid = \"grey90\", na.value = \"white\",\n                       trans = \"reverse\") +\n  theme_void() +\n  guides(fill = guide_colourbar(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nand, with a bit more data wrangling, for the full set,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdf <- slot(gwrmod$SDF, \"data\")\ng <- lapply(2:8, \\(j) {\n  x <- st_as_sf(gwrmod$SDF[, j]) \n  t <- which(names(sdf) == paste0(names(x)[1],\"_TV\"))\n  x[abs(sdf[, t]) < 1.96, 1] <- NA\n  x %>%\n    rename(beta = 1) %>%\n    ggplot(aes(fill = beta)) +\n      geom_sf(col = NA) +\n      scale_fill_gradient2(\"beta\", mid = \"grey90\", na.value = \"white\",\n                           trans = \"reverse\") +\n      theme_void() +\n      guides(fill = guide_colourbar(reverse = TRUE)) +\n      ggtitle(names(gwrmod$SDF[j]))\n})\ngrid.arrange(grobs = g)\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n![](hazard.gif){width=75}\n\n<font size = 3>I am sure there is a more elegant way of doing this. Don't worry about the code especially - the point is that not every estimate, everywhere, is significant.</font>\n\n</br>\nAs with the basic GW statistics, we can undertake a randomisation test to suggest whether the spatial variation in the coefficient estimates is statistically significant. **However** this takes some time to run -- with the default `nsims = 99` simulations it took about 12 minutes on my laptop. **I have 'commented it out' in the code block below with the suggestion that you don't run it now.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I suggest you do not run this\n# gwr.mc <- gwr.montecarlo(formula(ols4), covid_sp, adaptive = TRUE, bw = bw)\n```\n:::\n\n\nInstead, let's jump straight to the results, which I have saved in a pre-prepared workspace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- url(\"https://github.com/profrichharris/profrichharris.github.io/raw/main/MandM/workspaces/gwrmc.RData\")\nload(url)\nclose(url)\ngwr.mc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  p-value\n(Intercept)          0.40\nIMD                  0.38\nage0.11              0.00\nage25.34             0.15\nage50.59             0.22\ncarebeds             0.97\npoly(density, 2)1    0.00\npoly(density, 2)2    0.00\n```\n:::\n:::\n\n\n### Mixed GWR\n\nIt appears that only the `age0.11` and `density` variables exhibit significant spatial variation (p-value < 0.05). In principle it is possible to drop the other variables out from the local estimates and treat them as fixed, global estimates instead, in a Mixed GWR model (mixed global and local regression estimates). In practice, it is generating an error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This appears to generate an error\ngwrmixd <- gwr.mixed(Rate ~ IMD + age0.11 + age25.34 + age50.59 + carebeds +\n                       poly(density, 2),\n          data = covid_sp,\n          fixed.vars = c(\"IMD\", \"age25.34\", \"age50.59\", \"carebeds\"),\n          bw = bw, adaptive = TRUE)\n```\n:::\n\n\nWe can work around this, though, using partial regressions, regressing `Rate`, `age0.11` and `poly(density, 2)` on the fixed variables and using their residuals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndensity.1 <- poly(covid$density, 2)[, 1]\ndensity.2 <- poly(covid$density, 2)[, 2]\ncovid_sp$RateR <- residuals(lm(Rate ~ IMD + age25.34 + age50.59 + carebeds,\n                               data = covid_sp))\ncovid_sp$age0.11R <- residuals(lm(age0.11 ~ IMD + age25.34 + age50.59 +\n                                    carebeds, data = covid_sp))\ncovid_sp$density.1R <- residuals(lm(density.1 ~ IMD + age25.34 + age50.59 +\n                                    carebeds, data = covid_sp))\ncovid_sp$density.2R <- residuals(lm(density.2 ~ IMD + age25.34 + age50.59 +\n                                    carebeds, data = covid_sp))\nfml <- formula(RateR ~ age0.11R + density.1R + density.2R)\nbw <- bw.gwr(fml, data = covid_sp, adaptive = TRUE)\ngwrmixd <- gwr.basic(fml, data = covid_sp, bw = bw, adaptive = TRUE)\n```\n:::\n\n\nHere are the statistically significant results for the `age0.11` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$age0.11GWR <- gwrmixd$SDF$age0.11R\ncovid$age0.11GWR[abs(gwrmixd$SDF$age0.11R_TV) > 1.96] <- NA\nggplot(data = covid, aes(fill = age0.11GWR)) +\n  geom_sf(size = 0.25) +\n  scale_fill_gradient2(\"beta\", mid = \"grey90\", na.value = \"white\", trans = \"reverse\") +\n  theme_void() +\n  guides(fill = guide_colourbar(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\n### Multiscale GWR\n\nIt is also possible to fit a Multiscale GWR, which allows for the possibility of a different bandwith for each variable -- see `?gwr.multiscale`. Since there is no particular reason to presume that the bandwidth should be the same for all the variables, arguably Multiscale GWR should be preferred over standard GWR, at least in the first instance. Its main drawback, however, is that it takes a while to run -- over 3 hours for the code chunk below! (In principle it can be parallelised but it generated an error for me when I tried this with `parallel.method = cluster`.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndensity.1 <- poly(covid$density, 2)[, 1]\ndensity.2 <- poly(covid$density, 2)[, 2]\n# Do not run!\n# Took over 3 hours!\n#gwrmulti <- gwr.multiscale(Rate ~ IMD + age0.11 + age25.34 + age50.59 + carebeds +\n# density.1 + density.2, data = covid_sp, adaptive = TRUE)\n```\n:::\n\n\nTo save time, the results are available below. The bandwidths do appear to vary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- url(\"https://github.com/profrichharris/profrichharris.github.io/raw/main/MandM/workspaces/gwrmulti.RData\")\nload(url)\nclose(url)\ngwrmulti\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-08-21 14:44:09 \n   Call:\n   gwr.multiscale(formula = Rate ~ IMD + age0.11 + age25.34 + age50.59 + \n    carebeds + density.1 + density.2, data = covid_sp, adaptive = TRUE)\n\n   Dependent (y) variable:  Rate\n   Independent variables:  IMD age0.11 age25.34 age50.59 carebeds density.1 density.2\n   Number of data points: 924\n   ***********************************************************************\n   *                       Multiscale (PSDM) GWR                          *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: bisquare \n   Adaptive bandwidths for each coefficient(number of nearest neighbours): \n              (Intercept) IMD age0.11 age25.34 age50.59 carebeds density.1\n   Bandwidth           28 922      34      922      132      841       380\n              density.2\n   Bandwidth        186\n\n   ****************Summary of GWR coefficient estimates:******************\n                    Min.     1st Qu.      Median     3rd Qu.     Max.\n   Intercept   40.390229  158.475456  197.569654  250.106703 341.7481\n   IMD         -0.457266   -0.429212   -0.427347   -0.425449  -0.4210\n   age0.11     -4.383024   -0.168031    3.233327    5.482906  15.0608\n   age25.34     2.970842    2.980326    2.990406    2.999560   3.0909\n   age50.59    -1.540099    3.976661    4.868116    6.199428  10.9802\n   carebeds     0.041884    0.045506    0.050615    0.056445   0.0873\n   density.1 -228.739192 -171.871215 -117.550561   -6.118907  67.3146\n   density.2 -639.370049 -216.959473 -130.236970  -77.397916  26.1626\n   ************************Diagnostic information*************************\n   Number of data points: 924 \n   Effective number of parameters (2trace(S) - trace(S'S)): 227.0379 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 696.9621 \n   AICc value:  8395.1 \n   AIC value:  8142.156 \n   BIC value:  8216.88 \n   Residual sum of squares:  301719.5 \n   R-square value:  0.738389 \n   Adjusted R-square value:  0.6530458 \n\n   ***********************************************************************\n   Program stops at: 2022-08-21 17:46:34 \n```\n:::\n:::\n\n\n### Geographically and temporally weighted regression\n\nIt also possible to add a time dimension and undertake geographically and temporally weighted regression in `GWmodel`. The following workspace loads monthly COVID-19 data for Manchester neighbourhoods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- url(\"https://github.com/profrichharris/profrichharris.github.io/raw/main/MandM/workspaces/manchester.RData\")\nload(url)\nclose(url)\n```\n:::\n\n\nHere are the monthly rates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(covid, aes(fill = Rate )) +\n  geom_sf() +\n  facet_wrap(~ month) +\n  scale_fill_distiller(palette = \"RdBu\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\nIf now want to explore how the regression relationships vary in space-time then we can use the `bw.gtwr()` and `gtwr()` functions, for which we also need to specify a vector of time tags (`obs.tv = ...`). In these data, they are simply a numeric value, `covid$month_code` but see `?bw.gtwr()` and `?gtwr()` for further possibilities and for further information about the model.\n\n![](hazard.gif){width=75}\n\n<font size = 3>The model will take a little time to run -- enough time for you to get a cup of tea or coffee!</font>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_sp <- as_Spatial(covid)\nfml <- formula(Rate ~ IMD + age0.11 + age25.34 + age50.59 + carebeds + poly(density, 2))\nbw <- bw.gtwr(fml, data = covid_sp, obs.tv = covid$month_code, adaptive = TRUE)\ngtwrmod <- gtwr(fml, data = covid_sp, st.bw = bw, obs.tv = covid$month_code, adaptive = TRUE)\n```\n:::\n\n\n\n\nHere are the summary results of the model,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngtwrmod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-08-21 09:11:51 \n   Call:\n   gtwr(formula = fml, data = covid_sp, obs.tv = covid$month_code, \n    st.bw = bw, adaptive = TRUE)\n\n   Dependent (y) variable:  Rate\n   Independent variables:  IMD age0.11 age25.34 age50.59 carebeds density\n   Number of data points: 1768\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-3.8388 -2.4526 -0.6694  0.8773 23.0668 \n\n   Coefficients:\n                       Estimate Std. Error t value Pr(>|t|)   \n   (Intercept)        1.2277082  0.8772151   1.400  0.16182   \n   IMD                0.0022343  0.0088457   0.253  0.80062   \n   age0.11           -0.0311138  0.0307405  -1.012  0.31161   \n   age25.34           0.0316351  0.0174764   1.810  0.07044 . \n   age50.59           0.1492102  0.0483997   3.083  0.00208 **\n   carebeds           0.0009431  0.0014616   0.645  0.51886   \n   poly(density, 2)1  8.4668105  5.2762201   1.605  0.10874   \n   poly(density, 2)2 -5.6870143  3.6957704  -1.539  0.12404   \n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 3.542 on 1760 degrees of freedom\n   Multiple R-squared: 0.007583\n   Adjusted R-squared: 0.003636 \n   F-statistic: 1.921 on 7 and 1760 DF,  p-value: 0.06261 \n   ***Extra Diagnostic information\n   Residual sum of squares: 22079.68\n   Sigma(hat): 3.535908\n   AIC:  9499.228\n   AICc:  9499.331\n   ***********************************************************************\n   *    Results of Geographically and Temporally Weighted Regression     *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function for geographically and temporally weighting: bisquare \n   Adaptive bandwidth for geographically and temporally  weighting: 606 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric for geographically and temporally  weighting: A distance matrix is specified for this model calibration.\n\n   ****************Summary of GTWR coefficient estimates:*****************\n                              Min.       1st Qu.        Median       3rd Qu.\n   Intercept          -7.467273452  -1.429007024  -0.431890521   0.188930147\n   IMD                -0.060866478   0.000867536   0.006925644   0.016466529\n   age0.11            -0.263923302  -0.041615611   0.007456504   0.032878161\n   age25.34           -0.081155344   0.017377385   0.030977770   0.063555110\n   age50.59           -0.284989530   0.110990723   0.159690984   0.238809884\n   carebeds           -0.008797590   0.000070766   0.000863682   0.001820529\n   poly(density, 2)1 -22.971393286   5.633766857  12.761674565  22.069777132\n   poly(density, 2)2 -32.065614018  -8.663319026  -6.150064261  -3.539132987\n                        Max.\n   Intercept          6.5631\n   IMD                0.0631\n   age0.11            0.1432\n   age25.34           0.2475\n   age50.59           1.0677\n   carebeds           0.0066\n   poly(density, 2)1 94.7435\n   poly(density, 2)2 38.3984\n   ************************Diagnostic information*************************\n   Number of data points: 1768 \n   Effective number of parameters (2trace(S) - trace(S'S)): 57.81766 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1710.182 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 9304.009 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 9247.793 \n   Residual sum of squares: 18798.49 \n   R-square value:  0.1550625 \n   Adjusted R-square value:  0.1264803 \n\n   ***********************************************************************\n   Program stops at: 2022-08-21 09:13:00 \n```\n:::\n:::\n\n\nThey should be treated cautiously because the `Rate` value is strongly positively skewed such that it may have been better to have transformed it (e.g. taken its square root) prior to analysis. Even so, there is some evidence that the predictor `age0.11` variable, for example, varies spatially *and* temporally.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid$age0.11GWR <- gtwrmod$SDF$age0.11\ncovid$age0.11GWR[abs(gtwrmod$SDF$age0.11_TV) < 1.96] <- NA\nggplot(covid, aes(fill = age0.11GWR)) +\n  geom_sf() +\n  facet_wrap(~ month) +\n  scale_fill_gradient2(\"beta\", mid = \"grey90\", na.value = \"white\", trans = \"reverse\") +\n  theme_void() +\n  guides(fill = guide_colourbar(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](spregress_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n### Generalised GWR models with Poisson and Binomial options\n\nSee `?ggwr.basic`.\n\n## Summary\n\nIn this session we have looked at spatial regression models as a way to address the problem of spatial autocorrelation in regression residuals and to allow for the possibility that regression relationships vary across a map. In presenting these methods, at least some could be taken as offering a 'technical fix' to the statistical issue of spatial dependencies in the data, violating assumptions of independence. Whilst that may be true, and the more spatial approaches can be used as diagnostic tools to check for a mis-specified model, notably one that lacks a critical explanatory variable or where the relationship between the X and Y variables is non-linear, the limitation of this thinking is that it treats geography as an error to be resolved and/or it rests on the belief that with sufficient information the geographical differences will be explained. What geographically weighted regression, for example, reminds us is that the nature of the relationship may be complex because it is changing in form across the study region as the socio-spatial causes also vary from place to place. Such spatial complexity may be challenging to accommodate within the parameters of conventional aspatial or spatially naïve statistical thinking but ignoring the geographical variation is not a solution. What spatial thinking brings to the table is the recognition of geographical context and the knowledge that geographically rooted social outcomes are not independent of where the processes giving rise to those outcomes are taking place. \n\n## Further Reading\n\n![](spatial_regression.jpg){width=100}\n\n[Spatial Regression Models (2nd edition) by MD Ward & KS Gleditsch (2018)](https://uk.sagepub.com/en-gb/eur/spatial-regression-models/book262155){target=\"_blank\"}\n\nComber et al. (2022) A Route Map for Successful Applications of Geographically Weighted Regression. [https://doi.org/10.1111/gean.12316](https://doi.org/10.1111/gean.12316){target=\"_blank\"}\n\n\n\n\n",
    "supporting": [
      "spregress_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "1b6a2c58d06a7f2053bbc759c09ae2b2",
  "result": {
    "markdown": "---\ntitle: \"Tidyverse\"\nsubtitle: \"What Is the Tidyverse?\"\nexecute: \n  warning: false\n  message: false\n---\n\n\n\n\n![](tidyverse.png){width=300}\n\n## Introduction\n\nIf base R is R Classic then tidyverse is a new flavour of R, designed for data science. It consists of [a collection of R packages](https://www.tidyverse.org/){target=\"_blank\"} that \"share an underlying design philosophy, grammar, and data structures.\"\n\nTidyverse is easier to demonstrate than to pin-down to some basics so let's work through an example using both base R and tidyverse to illustrate some differences.\n\n## To Start\n\nIf, as suggested in 'Getting Started', you have created an R Project to contain all the files you create and download for this course then open it now by using File --> Open Project... from the dropdown menus in R Studio. If you have not created one then now might be a good time!\n\nWe will begin by downloading a data file to use. It will be downloaded to your working directory, which is the folder associated with your R Project if you are using one. You can check the working directory by using `getwd()` and change it using Session --> Set Working Directory or with the function `setwd(dir)` where `dir` is the chosen directory. If you have created a Project then the working directory is that of the Project.\n\nThe data are an extract of the [Covid Data Dashboard](https://coronavirus.data.gov.uk/){target=\"_blank\"} for England in December 2021. Some prior manipulation and adjustments to those data have been undertaken for another project so treat them as indicative only. The actual reported numbers may have been changed slightly from their originals although only marginally so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://github.com/profrichharris/profrichharris.github.io/raw/main/MandM/data/covid_extract.csv\", \"covid.csv\", mode = \"wb\", quiet = TRUE) \n```\n:::\n\n\nWe also need to `require(tidyverse)` ready for use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\n```\n:::\n\n\n![](hazard.gif){width=75}\n\n<font size = 3>If you get a warning message saying there is no package called tidyverse then you need to install it: `install.packages(\"tidyverse\", dependencies = TRUE)`. You will find that some people prefer to use `library()` instead of `require()`. The difference between them is subtle but you can find an argument in favour of using `library()` [here](https://www.r-bloggers.com/2016/12/difference-between-library-and-require-in-r/){target=\"_blank\"} even though I usually don't.</font>\n\n## Reading-in the data\n\nLet's read-in and take a look at the data. First in base R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- read.csv(\"covid.csv\")\nhead(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   MSOA11CD regionName X2021.12.04 X2021.12.11 X2021.12.18 X2021.12.25 All.Ages\n1 E02000002     London          25          48         148         176     7726\n2 E02000003     London          46          58         165         215    11246\n3 E02000004     London          24          44         100         141     6646\n4 E02000005     London          58          97         185         231    10540\n5 E02000007     London          38          94         153         205    10076\n6 E02000008     London          54         101         232         245    12777\n```\n:::\n:::\n\n\nNow using tidyverse,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- read_csv(\"covid.csv\")\nslice_head(df2, n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  MSOA11CD  regionName `2021-12-04` `2021-12-11` `2021-12-18` `2021-12-25`\n  <chr>     <chr>             <dbl>        <dbl>        <dbl>        <dbl>\n1 E02000002 London               25           48          148          176\n2 E02000003 London               46           58          165          215\n3 E02000004 London               24           44          100          141\n4 E02000005 London               58           97          185          231\n5 E02000007 London               38           94          153          205\n6 E02000008 London               54          101          232          245\n# ℹ 1 more variable: `All Ages` <dbl>\n```\n:::\n:::\n\n\nThere are some similarities -- for example the function `read.csv` reads-in a file of comma separated variables, as does `read_csv`. However, the output from these functions differ. First, tidyverse has, in this case, handled the names of the variables better. It has also created what is described as a `tibble` which is \"a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not.\" You can find out more about them and how they differ from traditional data frames [here](https://tibble.tidyverse.org/){target=\"_blank\"}. Basically, they are a form of data frame that fit into tidyverse's philosophy to try and keep 'things' tidy through a shared underlying design philosophy, grammar and data structures.\n\n## Selecting and renaming variables\n\nWe will now:\n- select the `regionName`, `2021-12-04` and `All Ages` variables;\n- rename the second of these as `cases` and the third as `population`;\n- and look at the data again to check that it has worked.\n\nIn base R,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- df1[, c(\"regionName\", \"X2021.12.04\", \"All.Ages\")]\nnames(df1)[2:3] <- c(\"cases\", \"population\")\nhead(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  regionName cases population\n1     London    25       7726\n2     London    46      11246\n3     London    24       6646\n4     London    58      10540\n5     London    38      10076\n6     London    54      12777\n```\n:::\n:::\n\n\nIn tidyverse,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- select(df2, regionName, `2021-12-04`, `All Ages`)\ndf2 <- rename(df2, cases = `2021-12-04`, population = `All Ages`)\nslice_head(df2, n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  regionName cases population\n  <chr>      <dbl>      <dbl>\n1 London        25       7726\n2 London        46      11246\n3 London        24       6646\n4 London        58      10540\n5 London        38      10076\n6 London        54      12777\n```\n:::\n:::\n\n\nComparing the two, the tidyverse code may be more intuitive to understand because of its use of verbs as functions: `select()`, `rename()` and so forth.\n\n## Piping\n\nNow we shall bring the two previous stages together, using what is referred to as a pipe. Without worrying about the detail, which we will return to presently, here is an example of a pipe, `|>` being used in base R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(\"covid.csv\") |>\n  (\\(x) x[, c(\"regionName\", \"X2021.12.04\", \"All.Ages\")])() -> df1\nnames(df1)[2:3] <- c(\"cases\", \"population\")\ndf1 |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  regionName cases population\n1     London    25       7726\n2     London    46      11246\n3     London    24       6646\n4     London    58      10540\n5     London    38      10076\n6     London    54      12777\n```\n:::\n:::\n\n\n![](hazard.gif){width=75}\n\n<font size = 3>The above will only work if you are using R version 4.1.0 or above. You can check which version you are running by using `R.Version()$version`.</font>\n\nHere is the same process using tidyverse and a different pipe, `%>%`,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"covid.csv\") %>%\n  select(regionName, `2021-12-04`, `All Ages`) %>%\n  rename(cases = `2021-12-04`, population = `All Ages`) %>%\n  slice_head(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  regionName cases population\n  <chr>      <dbl>      <dbl>\n1 London        25       7726\n2 London        46      11246\n3 London        24       6646\n4 London        58      10540\n5 London        38      10076\n6 London        54      12777\n```\n:::\n:::\n\n\nThe obvious difference here is that the tidyverse code is more elegant. But what is the pipe and what is the difference between `|>` in the base R code and `%>%` in the tidyverse example?\n\nA pipe is really just a way of sending ('piping`) something from one line of code to the next, to create a chain of commands (forgive the mixed metaphors). For example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0:10\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nCould be calculated as\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0:10 |>\n  mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nAs\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0:10 %>%\n  mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nor, if you want to save on a few characters of code,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0:10 %>%\n  mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nHowever, this won't work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0:10 |>\n  mean\n```\n:::\n\n\nThis is confusing but it is because of the different pipes, one (`|>`) a more recent development than the other (`%>%`).\n\nA more complicated example of piping is below. It employs the function `sapply()`, a variant of the function `lapply(X, FUN)` that takes a list `X` and applies the function `FUN` to each part of it. In the example, it is the function `mean`.\n\nHere it is without any pipes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(0:10, 10:20)\n  # Creates a list with two parts: the numbers 0 to 10, and 10 to 20\ny <- sapply(x, mean)\n  # Calculates the mean for each part of the list, which are 5 and 15\nsum(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\n  # Sums together the two means, giving 20\n```\n:::\n\n\nWith pipes, the above could instead be written as\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(0:10, 10:20) |>\n  sapply(mean) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\nor as\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(0:10, 10:20) %>%\n  sapply(mean) %>%\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\nAll three arrive at the same answer, which is 20.\n\nSo far, so good but what is the difference between `|>` and `%>%`? The answer is that `%>%` was developed before `|>` in the [magrittr package](https://cran.r-project.org/web/packages/magrittr/){target=\"_blank\"}, whereas `|>` is [R's new native pipe](https://www.r-bloggers.com/2021/05/the-new-r-pipe/){target=\"_blank\"}. They are often interchangeable **but not always**.\n\nAt the moment, the `|>` pipe is less flexible to use than `%>%`. Consider the following example. The final two lines of code work fine using `%>%` to pipe the data frame into the regression model, which is a line of best fit between the `x` and `y` values (the function `lm()` fits a linear model which can be used to predict a `y` value from a value of `x`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:100 %>%\n  data.frame(x = ., y = 2*. + rnorm(100)) %>%\n  lm(y ~ x, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x, data = .)\n\nCoefficients:\n(Intercept)            x  \n     0.3165       1.9939  \n```\n:::\n:::\n\n\n(note: the output you get will likely differ from mine because the function `rnorm()` adds some random variations to the data)\n\nHowever, it does *not* work with the pipe, `|>` because it does not recognise the place holder `.` that we had previously used to represent what was flowing through the pipe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The following code does not work\n1:100 |>\n  data.frame(x = ., y = 2*. + rnorm(100)) |>\n  lm(y ~ x, data = .)\n```\n:::\n\n\nTo solve the problem, the above code can be modified by wrapping the regression part in another function but the end result is rather 'clunky'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:100 |>\n  (\\(z) data.frame(x = z, y = 2*z + rnorm(100)))() |>\n  (\\(z) lm(y ~ x, data = z))() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x, data = z)\n\nCoefficients:\n(Intercept)            x  \n    -0.2703       2.0040  \n```\n:::\n:::\n\n\nOver time, expect `|>` to be developed and to supersede `%>%`. For now, you are unlikely to encounter errors using `%>%` as a substitute for `|>` but you might using `|>` instead of `%>%`. In other words, `%>%` is the safer choice if you are unsure, although the `|>` is faster:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"microbenchmark\", dependencies = TRUE)\nrequire(\"microbenchmark\")\nmicrobenchmark(\n  1:100 %>%\n    data.frame(x = ., y = 2*. + rnorm(100)) %>%\n    lm(y ~ x, data = .),\n  1:100 |>\n    (\\(z) data.frame(x = z, y = 2*z + rnorm(100)))() |>\n    (\\(z) lm(y ~ x, data = z))(),\n  times = 100\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n                                                                                                   expr\n                       1:100 %>% data.frame(x = ., y = 2 * . + rnorm(100)) %>% lm(y ~      x, data = .)\n (function(z) lm(y ~ x, data = z))((function(z) data.frame(x = z,      y = 2 * z + rnorm(100)))(1:100))\n     min       lq     mean   median       uq      max neval cld\n 244.278 253.0110 301.5222 266.7870 280.2965 3069.629   100   a\n 242.269 253.1955 274.9644 261.8055 278.9435  495.280   100   a\n```\n:::\n:::\n\n\n## Back to the example\n\nAfter that digression into piping, let's return to our example that is comparing base R and tidyverse to read-in a table of data, select variables, rename one and, in the following, to calculate the number of COVID-19 cases per English region as a percentage of their estimated populations in the week ending 2021-12-04.\n\nFirst, in base R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- read.csv(\"covid.csv\")\ndf1 <- df1[, c(\"regionName\", \"X2021.12.04\", \"All.Ages\")]\nnames(df1)[c(2,3)] <- c(\"cases\", \"population\")\ncases <- tapply(df1$cases, df1$regionName, sum)  # Total cases per region\ncases\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           East Midlands          East of England                   London \n                   25472                    35785                    43060 \n              North East               North West               South East \n                   10796                    31185                    62807 \n              South West            West Midlands Yorkshire and The Humber \n                   33846                    26554                    21079 \n```\n:::\n\n```{.r .cell-code}\n  # This step isn't necessary but is included\n  # to show the result of the line above\npopulation <- tapply(df1$population, df1$regionName, sum)\n  # Total population per region\nrate <- round(cases / population * 100, 3)\nrate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           East Midlands          East of England                   London \n                   0.524                    0.571                    0.479 \n              North East               North West               South East \n                   0.403                    0.423                    0.681 \n              South West            West Midlands Yorkshire and The Humber \n                   0.598                    0.445                    0.381 \n```\n:::\n:::\n\n\nNow using tidyverse,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"covid.csv\") |>\n  select(regionName, `2021-12-04`, `All Ages`) |>\n  rename(cases = `2021-12-04`, population = `All Ages`) |>\n  group_by(regionName) |>\n  summarise(across(where(is.numeric), sum)) |>\n  mutate(rate = round(cases / population * 100, 3)) |>\n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  regionName               cases population  rate\n  <chr>                    <dbl>      <dbl> <dbl>\n1 East Midlands            25472    4865583 0.524\n2 East of England          35785    6269161 0.571\n3 London                   43060    8991550 0.479\n4 North East               10796    2680763 0.403\n5 North West               31185    7367456 0.423\n6 South East               62807    9217265 0.681\n7 South West               33846    5656917 0.598\n8 West Midlands            26554    5961929 0.445\n9 Yorkshire and The Humber 21079    5526350 0.381\n```\n:::\n:::\n\n\nEither way produces the same answers but, again, there is an elegance and consistency to the tidyverse way of doing it (which works just fine with the `|>` pipe) that is, perhaps, missing from base R.\n\n## Plotting\n\nAs a final step for the comparison, we will extend the code to visualise the regional COVID-19 rates in a histogram, with a [rug plot](https://en.wikipedia.org/wiki/Rug_plot#:~:text=A%20rug%20plot%20is%20a,a%20one%2Ddimensional%20scatter%20plot){target=\"_blank\"} included. A rug plot is a way of preserving the individual data values that would otherwise be 'lost' within the bins of a histogram.\n\nAs previously, we begin with base R,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- read.csv(\"covid.csv\")\ndf1 <- df1[, c(\"regionName\", \"X2021.12.04\", \"All.Ages\")]\nnames(df1)[c(2,3)] <- c(\"cases\", \"population\")\ncases <- tapply(df1$cases, df1$regionName, sum)\npopulation <- tapply(df1$population, df1$regionName, sum)\nrate <- round(cases / population * 100, 3)\nhist(rate, xlab = \"rate (cases as % of population)\",\n     main = \"Regional COVID-19 rates: week ending 2021-12-04\")\nrug(rate, lwd = 2)\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n...and continue with tidyverse, creating the output in such a way that it mimics the previous plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ggplot2)\nread_csv(\"covid.csv\") |>\n  select(regionName, `2021-12-04`, `All Ages`) |>\n  rename(cases = `2021-12-04`, population = `All Ages`) |>\n  group_by(regionName) |>\n  summarise(across(where(is.numeric), sum)) |>\n  mutate(rate = round(cases / population * 100, 3)) -> df2\n\ndf2 |>\n  ggplot(aes(x = rate)) +\n    geom_histogram(colour = \"black\", fill = \"grey\", binwidth = 0.05,\n                   center = -0.025) +\n    geom_rug(linewidth = 2) +\n    labs(x = \"rate (cases as % of population)\", y = \"Frequency\",\n         title = \"Regional COVID-19 rates: week ending 2021-12-04\") +\n    theme_minimal() +\n    theme(panel.grid.major.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nIn this instance, it is the tidyverse code that is the more elaborate. This is partly because there is more customisation of it to mimic the base R plot. However, it is also because it is using the package [ggplot2](https://ggplot2.tidyverse.org/){target=\"_blank\"} to produce the histogram. We return to `ggplot2` more in later sessions. For now it is sufficient to scan the code and observe how it is 'layering up' the various components of the graphic, which those components separated by the `+` in the lines of code.\n\n![](hazard.gif){width=75}\n\n<font size = 3>The use of the `+` notation in `ggplot2` operates a little like a pipe in that the outcome of one operation is handed on to the next to modify the graphic being produced. It doesn't use the pipe because the package's origins are somewhat older but just think of the `+` as layering-up -- adding to -- the graphic.</font>\n\nI prefer the `ggplot2` to the `hist()` graphics plot but that may be a matter of personal taste. However, `ggplot2` can do 'clever things' with the visualisation, a hint of which is shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 |>\n  ggplot(aes(x = rate)) +\n    geom_histogram(colour = \"black\", fill = \"grey\", binwidth = 0.05,\n                   center = -0.025) +\n    geom_rug(aes(colour = regionName), size = 2) +\n    labs(x = \"rate (cases as % of population)\", y = \"Frequency\",\n         title = \"Regional COVID-19 rates: week ending 2021-12-04\") +\n    scale_colour_discrete(name = \"Region\") +\n    theme_minimal() +\n    theme(panel.grid.major.y = element_blank()) \n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n</br>\nPlease don't form that impression that `ggplot2` is hard-wired to tidverse and base R to the base `graphics`.  In practice, they are interchangeable.\n\nHere is an example of using `ggplot2` after a sequence of base R commands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- read.csv(\"covid.csv\")\ndf1 <- df1[, c(\"regionName\", \"X2021.12.04\", \"All.Ages\")]\nnames(df1)[c(2,3)] <- c(\"cases\", \"population\")\ndf1$rate <- round(df1$cases / df1$population * 100, 3)\nggplot(df1, aes(x = rate, y = regionName)) +\n  geom_boxplot() +\n  labs(x = \"rate (cases as % of population)\",\n       y = \"region\",\n       title = \"Regional COVID-19 rates: week ending 2021-12-04\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nAnd here is an example of using the base R graphic `boxplot()` after a chain of tidyverse commands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"covid.csv\") |>\n  select(regionName, `2021-12-04`, `All Ages`) |>\n  rename(cases = `2021-12-04`, population = `All Ages`) |>\n  mutate(rate = round(cases / population * 100, 3)) -> df2\npar(mai=c(0.8,2,0.5,0.5), bty = \"n\", pch = 20)  # See text below\nboxplot(df2$rate ~ df2$regionName, horizontal = TRUE,\n        whisklty = \"solid\", staplelty = 0,\n        col = \"white\", las = 1, cex = 0.9, cex.axis = 0.75,\n        xlab = \"rate (cases as % of population)\", ylab=\"\",\n        main = \"Regional COVID-19 rates: week ending 2021-12-04\")\ntitle(ylab = \"region\", line = 6)\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nI would argue that, in this instance, the base R graphic is as nice as the ggplot2 one but it took more customisation to get it that way and I had to go digging around in the help files, `?boxplot`, `?bxp` and `?par` to find what I needed, which included changing the graphic's margins (`par(mai=...))`), moving and changing the size of the text on the vertical axis (the argument `cex.axis` and the use of the `title` function), changing the appearance of the 'whiskers' (`whisklty = \"solid\"` and `staplelty = 0`), and so forth. Still, it does demonstrate that you can have a lot of control over what is produced, if you have the patience and tenacity to do so.\n\n## Which is better?\n\nHaving provided a **very** small taste of tidyverse and how it differs from base R, we might ask, \"which is better?\" However, the question is misguided: it is a little like deciding to go to South America and asking whether Spanish or Portuguese is the better language to use. It depends, of course, on what you intend to do and where you intend to travel.\n\nI use both base R and tidyverse packages in my work, sometimes drifting between the two in rather haphazard ways. If I can get what I want to work then I am happy. Outcomes worry me more than means so, although I use tidyverse a lot, I am not always as tidy as it would want me to be!\n\n## Futher reading\n\n![](data_science.jpg){width=100}\n\nThere is **much** more to tidyverse than has been covered here. See [here](https://www.tidyverse.org/packages/){target=\"_blank} for further information about it and its core packages.\n\nA full introduction to using tidyverse for Data Science is provided by the book [R for Data Science](https://www.oreilly.com/library/view/r-for-data/9781492097396/){target=\"_blank\"} (2nd edition) by Hadley Wickham and Garrett Grolemund. There is a free [online version](http://r4ds.hadley.nz/){target=\"_blank\"}.\n",
    "supporting": [
      "tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
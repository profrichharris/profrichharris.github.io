{
  "hash": "2583ebc9daaf16e89cc7d796546dd272",
  "result": {
    "markdown": "---\ntitle: \"A Cartographic Answer\"\nexecute: \n  warning: false\n  message: false\n---\n\n\n\n\n## A worked example\n\nLet's answer the 'why?' question with a quick example of R in use. We will not worry about the exact detail of what the code means at this stage or attempt to explain it in full. Instead, we will largely take it as we find it, copying and pasting from this webpage into the R Console. The focus is on some of what R can do from a geographic perspective and not, at this stage, on how it does it.\n\n![](hazard.gif){width=\"75\"}\n\n<font size = 3>If you find that the `+` sign stays on your screen, in the R Console, for a while and isn't followed by `>` then you have either forgotten to hit `Enter`/`Return` or have not included all of the code that is needed to complete an operation (to complete a function, for example). You can always press `esc` on your keyboard and try again.</font>\n\n### Step 1\n\nFirst, we will check that the necessary packages are installed and then `require` them, which means to load them so they are available to use. The usual way to install a package is with the function, `install.packages()` so, for example, the graphics package `ggplot2` is installed using `install.packages(\"ggplot2\")`. The code below is a bit more elaborate as it checks which packages have not yet been installed and installs them. However, the two-step process is the same: install and then require -- use `install.packages(...)` to install packages (only needs to be done once on your computer, unless you re-install R / replace it with a more recent version); then `require(...)` to load the desired packages (needs to be done each time R is restarted).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checks to see which packages are already installed:\ninstalled <- installed.packages()[,1]\n# Creates a character vector of packages that are required:\nrequired <- c(\"XML\", \"tidyverse\", \"readxl\", \"sf\", \"ggplot2\", \"classInt\", \"ggspatial\")\n# Checks which of the required packages have not yet been installed:\ninstall <- required[!(required %in% installed)]\n# Installs any that have not yet been installed:\nif(length(install)) install.packages(install, dependencies = TRUE)\n\nrequire(tidyverse)\nrequire(readxl)\nrequire(sf)\nrequire(ggplot2)\nrequire(classInt)\nrequire(ggspatial)\n```\n:::\n\n\n![](hazard.gif){width=\"75\"}\n\n<font size = 3>The use of `#` indicates a comment in the code. It is there just for explanation. It is not executable code (it is ignored not run).</font>\n\nThe required packages can also be loaded together rather than separately as the were in the code chunk before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(required, require, character.only = TRUE)\n```\n:::\n\n\n![](hazard.gif){width=\"75\"}\n\n<font size = 3>You will find that some people prefer to use `library(...)` instead of `require(...)`. There difference between them is subtle but you can find an argument in favour of using `library` [here](https://www.r-bloggers.com/2016/12/difference-between-library-and-require-in-r/){target=\"_blank\"}.</font>\n\n### Step 2\n\nNext, we will download a data table published by Statistics South Africa that provides estimates of the number of people speaking various languages in the South African Provinces in 2011. These data were downloaded from [https://superweb.statssa.gov.za/webapi/](https://superweb.statssa.gov.za/webapi/){target=\"_blank\"}. The data are found in an Excel spreadsheet, which is read in and manipulated, converting the counts into percentages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://github.com/profrichharris/profrichharris.github.io/blob/main/MandM/data/table_2022-06-22_17-36-26.xlsx?raw=true\", \"language.xlsx\", quiet = TRUE, mode = \"wb\")\n\nread_xlsx(\"language.xlsx\", sheet = \"Data Sheet 0\", skip = 8) |>\n  rename(Name = 2) |>\n  drop_na(Afrikaans) |>\n  select(-1) |>\n  mutate(across(where(is.numeric), ~ round(. / Total * 100, 2))) -> languages\n```\n:::\n\n\nHere is the top of the data, viewed in the R environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(languages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Name     Afrikaans English IsiNdebele IsiXhosa IsiZulu Sepedi Sesotho Setswana\n  <chr>        <dbl>   <dbl>      <dbl>    <dbl>   <dbl>  <dbl>   <dbl>    <dbl>\n1 Eastern…      9.32    3.62       0.06    83.4     0.8    0.05    2.37     0.03\n2 Free St…     11.9     1.16       0.37     9.09    5.1    0.26   64.4      6.85\n3 Gauteng      14.4    12.5        1.94     7.59   21.5   10.7    13.1      8.39\n4 KwaZulu…      1.49   13.6        0.2      2.33   80.9    0.11    0.71     0.06\n5 Limpopo       2.32    0.55       1.49     0.27    0.65  52.2     1.32     1.58\n6 Mpumala…      6.15    1.66      12.1      1.49   26.4   10.8     3.66     2.72\n# … with 5 more variables: SiSwati <dbl>, Tshivenda <dbl>, Xitsonga <dbl>,\n#   Other <dbl>, Total <dbl>\n```\n:::\n:::\n\n\nThere is often more than one way of achieving something in R. Here we could also use,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_head(languages, n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Name     Afrikaans English IsiNdebele IsiXhosa IsiZulu Sepedi Sesotho Setswana\n  <chr>        <dbl>   <dbl>      <dbl>    <dbl>   <dbl>  <dbl>   <dbl>    <dbl>\n1 Eastern…      9.32    3.62       0.06    83.4     0.8    0.05    2.37     0.03\n2 Free St…     11.9     1.16       0.37     9.09    5.1    0.26   64.4      6.85\n3 Gauteng      14.4    12.5        1.94     7.59   21.5   10.7    13.1      8.39\n4 KwaZulu…      1.49   13.6        0.2      2.33   80.9    0.11    0.71     0.06\n5 Limpopo       2.32    0.55       1.49     0.27    0.65  52.2     1.32     1.58\n6 Mpumala…      6.15    1.66      12.1      1.49   26.4   10.8     3.66     2.72\n# … with 5 more variables: SiSwati <dbl>, Tshivenda <dbl>, Xitsonga <dbl>,\n#   Other <dbl>, Total <dbl>\n```\n:::\n:::\n\n\n### Step 3\n\nWhat R allows is the opportunity to map the data without needing to go outside R to use separate software such as GIS. To do so, we will need a 'blank map' of the Provinces that can be joined with the data to create a choropleth map ([a type of thematic map](https://www.maptive.com/thematic-map-examples/){target=\"_blank\"}).\n\nFirst, we will download a pre-existing map, also from [https://superweb.statssa.gov.za/webapi/](https://superweb.statssa.gov.za/webapi/){target=\"_blank\"}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://github.com/profrichharris/profrichharris.github.io/blob/main/MandM/boundary%20files/mapview.kmz?raw=true\", \"map.kmz\", quiet = TRUE, mode = \"wb\")\nunzip(\"map.kmz\")\nst_read(\"doc.kml\") |>\n  select(-Description) -> map\n```\n:::\n\n\nHere is the outline of that map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = map) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](why_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Step 4\n\nNow we can link the data table to the map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap |>\n  left_join(languages, by = \"Name\") -> map\n```\n:::\n\n\nand then plot one of the variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = map) +\n  annotation_map_tile(type = \"cartolight\", progress = \"none\") +\n  geom_sf(aes(fill = IsiXhosa), alpha = 0.8) +\n  scale_fill_gradient(low = \"white\", high = \"dark blue\") +\n  ggtitle(\"% Population speaking Xhosa\")\n```\n\n::: {.cell-output-display}\n![](why_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n</br> The really nice thing about this is that it is now very easy to change the appearance of the map with only minor updates to the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = map) +\n  annotation_map_tile(type = \"stamenwatercolor\", progress = \"none\") +\n  geom_sf(aes(fill = English), alpha = 0.8) +\n  scale_fill_gradient(low = \"white\", high = \"dark red\") +\n  ggtitle(\"% Population speaking English\")\n```\n\n::: {.cell-output-display}\n![](why_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = map) +\n  annotation_map_tile(type = \"thunderforestlandscape\", progress = \"none\") +\n  geom_sf(aes(fill = Afrikaans), alpha = 0.8, col = \"transparent\") +\n  scale_fill_gradient(low = \"white\", high = \"dark red\") +\n  annotation_north_arrow(which_north = \"grid\", location = \"topright\") +\n  ggtitle(\"% Population speaking Afrikaans\")\n```\n\n::: {.cell-output-display}\n![](why_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Step 5\n\nFinally, once we are happy with it, we can export the image in a format suitable for a journal publication or to insert into other documents such as Microsoft Word.\n\nAs jpeg, to print quality:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"mymap.jpg\", device = \"jpeg\", width = 7, height = 6, units = \"in\", dpi = \"print\")\n```\n:::\n\n\nAs pdf:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"mymap.pdf\", device = \"pdf\", width = 7, height = 6, units = \"in\")\n```\n:::\n\n\nAs bmp, to screen quality:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"mymap.bmp\", device = \"bmp\", width = 7, height = 6, units = \"in\", dpi = \"screen\")\n```\n:::\n\n\nIf we now look in your working directory, they should be there:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(pattern = \"mymap\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mymap.bmp\" \"mymap.jpg\" \"mymap.pdf\"\n```\n:::\n:::\n\n\n## Another example\n\nThe following example is much more complex however it should still make a simple point -- it does not take too many lines of code to produce a high quality visual output. It *might* take a little bit of searching around online to find the code and instruction to produce exactly what you want but I rarely struggle to find an answer fairly quickly.\n\nI originally developed the following maps in response to the release of the 2021 UK Census data showing the ethnic composition of small area neighbourhoods. The four cities -- Birmingham, Leicester, London and Manchester -- are the ones that are no longer majority White British (i.e. less than half their population self-identified as White British). A consequence of this demographic change is that the cities are becoming more ethnically diverse, which is what the maps show, using a standardised census geography [that I also created in R](https://profrichharris.github.io/census/harmonised/){target=\"_blank\"}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read-in the attribute data and the boundary file:\ndf <- read_csv(\"https://github.com/profrichharris/profrichharris.github.io/blob/main/MandM/data/diversity.csv?raw=true\")\nmap <- st_read(\"https://github.com/profrichharris/profrichharris.github.io/raw/main/MandM/boundary%20files/cities.geojson\", quiet = TRUE)\n\n# Although more complex, at heart what the following code does is\n# join the map to the data and then produce a separate map for\n# each city and time period, using a consistent style\ndf |>\n  pivot_longer(where(is.numeric), values_to = \"index\", names_to = \"year\") %>%\n  mutate(year = paste0(\"20\",substring(year, 3, 4))) %>%\n  left_join(map, ., by = \"OAXXCD\") %>%\n  mutate(group = paste(CITY, year, sep = \" ~ \")) %>%\n  split(.$group) %>%\n\n  lapply(function(x) {\n    \n    ggplot(x, aes(fill = index)) +\n      geom_sf(col = \"transparent\") +\n      scale_fill_viridis_c(\"Diversity\", values = c(0,0.25,0.5,0.7,0.85,0.95,1)) +\n      annotation_north_arrow(location = \"tl\", style = north_arrow_minimal(text_size = 10),\n                             height = unit(0.6, \"cm\"), width = unit(0.6, \"cm\")) +\n      annotation_scale(location = \"br\", style = \"ticks\", line_width = 0.5,\n                       text_cex = 0.5, tick_height = 0.4,\n                       height = unit(0.15, \"cm\"), text_pad = unit(0.10, \"cm\")) +\n      theme_minimal() +\n      theme(axis.text = element_blank(),\n            axis.ticks = element_blank(),\n            plot.title = element_text(size = 8, hjust = 0.5),\n            legend.title = element_text(size = 7, vjust = 3),\n            legend.text =element_text(size = 6), \n            panel.grid.major = element_blank(),\n            panel.grid.minor = element_blank(),\n            plot.margin = margin(t = 0,  \n                                 r = 0,  \n                                 b = 0,\n                                 l = 0)) +\n      labs(title = paste0(x$CITY[1], \": \", x$year[1]))\n  }) -> g\n\n# The cowplot library offers some additional plotting functionality\nif(!(\"cowplot\" %in% installed)) install.packages(\"cowplot\")\nrequire(cowplot)\n\n# The following gets the common legend for the maps\n# and stops it being printed 12 times -- once will be enough!\nlegend <- get_legend(g[[1]])\nlapply(g, function(x) {\n  x + theme(legend.position='none')\n}) -> g\n\n# This brings all the maps together as one\nggdraw(plot_grid(plot_grid(plotlist = g, ncol=3, align='v'),\n                 plot_grid(NULL, legend, ncol=1, scale = 0.5),\n                 rel_widths=c(1, 0.1),\n                 rel_heights=c(1, 0,1))) -> g\n\nprint(g)\n```\n\n::: {.cell-output-display}\n![](why_files/figure-html/unnamed-chunk-17-1.png){width=816}\n:::\n:::\n\n\n## Convinced?\n\nOf course, maps can also be produced in open source software such as [QGIS](https://www.qgis.org/en/site/){target=\"_blank\"} and GIS software certainly have their use. R is not automatically better or necessarily a replacement for these. However, what it does offer is an integrated environment for what we might call geographic data science: we can download data from external websites, load and tidy-up those data, fit statistical or other models to them and map the results -- all from within R. Our stages of working can be saved as scripts, which are faster to change and modify than using 'point-and-click' operations, and we can share our code with other people (even those using different operating systems) facilitating collaborative working and reproducible social-/ science. Finally, there are **lots** of packages available for reading, visualising, and analysing spatial data in R. Some of them are [summarised here](https://cran.r-project.org/web/views/Spatial.html){target=\"_blank\"}. These are attractive reasons for mapping and modelling within R.\n\n## Alternatives\n\n![](python_book.png){width=\"100\"}\n\nAside from software such as QGIS, an interesting area of development is Geographic Data Science with Python. [You can learn more about it here](https://geographicdata.science/book/intro.html){target=\"_blank\"}.\n\n## Need more convincing?\n\nIf you have time, have a look at [this exercise](https://profrichharris.github.io/openday/){target=\"blank\"} that we sometimes use with prospective students at University open days. The idea of the exercise is not to teach the students R but to show them how we use R for geographic data science in the School of Geographical Sciences. What the exercise does is take COVID-19 data for English neighbourhoods, fit statistical models to it and map the results -- all in R. Again, it is the ability to use R for all the stages shown below that makes it so useful.\n\n![](data-science.png)\n\n<font size = 2>Source: [R for Data Science](https://r4ds.had.co.nz/introduction.html){target=\"\\\"_blank\"}</font>\n",
    "supporting": [
      "why_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}